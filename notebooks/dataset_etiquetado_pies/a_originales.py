# Imports
import os
import random
import shutil

# Prefijo para identificar im√°genes (debe aparecer en el nombre del archivo)
PREFIX = "pie_"

# Variables globales
SEED = 42  # Semilla para reproducibilidad
NUM_MUESTRA = 300  # N√∫mero de im√°genes a seleccionar aleatoriamente

# Rutas
INPUT_PATH = "/home/nahumfg/GithubProjects/parliament-voting-records/data/procesamiento_todas_votaciones/b_zonas"
OUTPUT_PATH = "/home/nahumfg/GithubProjects/parliament-voting-records/data/dataset_etiquetado_pies/a_originales"


def main():
    # Crear directorio de salida si no existe
    os.makedirs(OUTPUT_PATH, exist_ok=True)

    # Listar todas las im√°genes que contengan el PREFIX en todas las subcarpetas
    imagenes = []

    print(f"üîç Buscando im√°genes con prefijo '{PREFIX}' en todas las subcarpetas de:")
    print(f"   {INPUT_PATH}")

    # Recorrer recursivamente todas las subcarpetas
    for root, dirs, files in os.walk(INPUT_PATH):
        for file in files:
            # Verificar si el nombre del archivo contiene el prefijo y es una imagen
            if PREFIX in file and file.lower().endswith((".jpg", ".jpeg", ".png")):
                ruta_completa = os.path.join(root, file)
                imagenes.append(ruta_completa)

    print(f"‚úì Total de im√°genes encontradas con prefijo '{PREFIX}': {len(imagenes)}")

    # Verificar que hay im√°genes disponibles
    if len(imagenes) == 0:
        print(f"‚ùå ERROR: No se encontraron im√°genes con el prefijo '{PREFIX}'")
        return

    # Determinar cu√°ntas im√°genes copiar
    if len(imagenes) < NUM_MUESTRA:
        print(
            f"‚ö†Ô∏è  ADVERTENCIA: Solo hay {len(imagenes)} im√°genes disponibles, pero se solicitaron {NUM_MUESTRA}"
        )
        num_copiar = len(imagenes)
    else:
        num_copiar = NUM_MUESTRA

    # Seleccionar aleatoriamente NUM_MUESTRA im√°genes usando el SEED para reproducibilidad
    random.seed(SEED)
    imagenes_seleccionadas = random.sample(imagenes, num_copiar)

    print(f"\nüìã Seleccionadas {num_copiar} im√°genes aleatoriamente (SEED={SEED})")
    print(f"üìÇ Copiando a: {OUTPUT_PATH}\n")

    # Copiar las im√°genes seleccionadas con nombres secuenciales
    for i, imagen_origen in enumerate(imagenes_seleccionadas, start=1):
        # Obtener la extensi√≥n del archivo original
        extension = os.path.splitext(imagen_origen)[1]

        # Crear nombre secuencial (001.jpg, 002.jpg, etc.)
        nombre_destino = f"{i:03d}{extension}"
        ruta_destino = os.path.join(OUTPUT_PATH, nombre_destino)

        # Copiar el archivo
        shutil.copy2(imagen_origen, ruta_destino)

        if i % 50 == 0:  # Mostrar progreso cada 50 im√°genes
            print(f"  üì• Copiadas {i}/{num_copiar} im√°genes...")

    print(f"\n‚úÖ Proceso completado exitosamente!")
    print(f"   {num_copiar} im√°genes copiadas en {OUTPUT_PATH}")


if __name__ == "__main__":
    main()
